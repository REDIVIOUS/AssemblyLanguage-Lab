;Lab3-part1
;The main program and function1 and function2

.386

PUBLIC OUTNAME, TRANS10, GA1, TEMP, OUT1, OUT2, OUT3, OUT4, OUT5, OUT6, OUT7, TEMPADDR
EXTERN CALCREFER : NEAR, RANKLEVEL : NEAR, ALLINFO : NEAR

PRINTS MACRO PR ;9�ŵ�������ַ���
	PUSH AX
	PUSH DX
	LEA DX,PR
	MOV AH,9H
	INT 21H
	POP DX
	POP AX
ENDM

SCANS MACRO SC ;10�ŵ��������ַ���
	PUSH AX
	PUSH DX
	LEA DX,SC
	MOV AH,10
	INT 21H
	POP DX
	POP AX
ENDM

CRLF MACRO ;����
	PUSH DX
	PUSH AX
	MOV DL,0AH
	MOV AH,2H
	INT 21H
	POP AX
	POP DX
ENDM

TENOUT MACRO NUM ;���ʮ��������
	PUSH AX
	MOV AX, WORD PTR [NUM]
	CALL TRANS10
	PRINTS TEMP
	POP AX
ENDM

TENOUT_DIS MACRO NUM ;���ʮ��������
	PUSH AX
	MOVZX AX, BYTE PTR [NUM]
	CALL TRANS10
	PRINTS TEMP
	POP AX
ENDM

INEDIT MACRO NUM, C1, C2 ;����ԭ����ֵ
	SCANS IN_EDIT ;����ı��ֵ
	CRLF
	LEA DI, IN_EDIT+2
	MOVZX CX, IN_EDIT+1
	CMP CX, 0
	JZ C2 ;����س���ֱ�������޸�
	CALL BITRANS ;10����ת2����
	CMP DI, -1
	JZ C1 
	MOV AX, TEMP_NUM
	MOV WORD PTR [NUM],AX
ENDM

INEDIT_BIT MACRO NUM, C1, C2 ;����ԭ����ֵ
	SCANS IN_EDIT ;����ı��ֵ
	CRLF
	LEA DI, IN_EDIT+2
	MOVZX CX, IN_EDIT+1
	CMP CX, 0
	JZ C2 ;����س���ֱ�������޸�
	CALL BITRANS ;10����ת2����
	CMP DI, -1
	JZ C1 
	MOV AX, TEMP_NUM
	MOV [NUM], AL
ENDM

STACK SEGMENT USE16 PARA STACK 'STACK'
	DB 500 DUP(0)
STACK ENDS

DATA SEGMENT USE16 PARA PUBLIC 'DATA'
	BNAME DB 'ABC', 7 DUP(0)  ;�ϰ�����
	BPASS DB 'ABC', 7 DUP(0) ;����
	N EQU 8 ;��Ʒ����
	GA1 DB 'PEN', 7 DUP(0), 10 ;��Ʒ���Ƽ��ۿ�
      	DW 35, 56, 70, 25, ? ;�Ƽ��Ȼ�δ����
	GA2 DB 'BOOK', 6 DUP(0), 9 ;��Ʒ���Ƽ��ۿ�
        DW 12, 30, 25, 5, ? ;�����ۣ����ۼۣ����������������������Ƽ���
    GA3 DB 'PENCIL', 4 DUP(0), 9 
        DW 50, 30, 25, 5, ? 
    GA4 DB 'BAG',7 DUP(0), 10
        DW 50, 80, 60, 20, ? 
	GA5 DB 'TEXTBOOK', 2 DUP(0), 8
	    DW 40, 80, 50, 20, ?
	GA6 DB 'PAPER', 5 DUP(0), 9
	    DW 5, 10, 50, 30, ?
	GA7 DB 'GLUE', 6 DUP(0), 10
        DW 10, 20, 50, 30, ?
	GA8 DB 'CANDY', 5 DUP(0), 9
	    DW 2, 4, 60, 40, ?

	AUTH DB 0
	IN_NAME DB 12
			DB ?
	       	DB 12 DUP(0)

	IN_PWD DB 10
           DB ?
           DB 10 DUP(0)

	IN_ITEM DB 12
        	DB ?
      	   	DB 12 DUP(0)

	IN_EDIT DB 10
			DB ?
			DB 10 DUP(0)

	IN_MENU DB 5
			DB ?
			DB 5 DUP(0)
	TEMP DB 10 DUP(0)

	MENU0 DB 'PLEASE CHOOSE ONE FROM 1-6$'
	MENU1 DB '1=SEARCH THE IMFORMATION OF ITEMS$'
	MENU2 DB '2=EDIT THE IMFORMATION OF ITEM$'
	MENU3 DB '3=CALCULATE THE RECOMENDATION$'
	MENU4 DB '4=RANK THE RECOMENDATION$'
	MENU5 DB '5=OUTPUT THE IMFORMATION OF THE ITEMS$'
	MENU6 DB '6=EXIT$'
	OUT1 DB 'ITEM NAME: $'
	OUT2 DB 'DISCOUNT: $'
	OUT3 DB 'SAILING PRICE: $'
	OUT4 DB 'TOTAL STOCK NUMBERS: $'
	OUT5 DB 'SOLD OUT NUMBERS: $'
	OUT6 DB 'RECOMENDATION LEVEL: $'
	OUT7 DB 'INPUT PRICE: $'

	PUTNAME DB 'PLEASE INPUT THE NAME(INPUT ENTER TO LOOKUP, INPUT Q TO QUIT)$'
	NOTITEM DB 'DO NOT FIND THE ITEM$'
	PUTPASSWORD DB 'PLEASE INPUT THE PASSWORD$'
	ITEMNAME DB 'PLEASE INPUT THE ITEM NAME(INPUT ENTER TO INPUT NAME)$'
	LOGFAIL DB 'YOUR USER NAME OR PASSWORD IS WRONG!$'
	LOGINREMIND DB 'IDENTIFICATION GOT!$'
	NOTE DB '->$'
	TEMPADDR DW ?
	TEMP_NUM DW ?
DATA ENDS

CODE SEGMENT USE16 PARA PUBLIC 'CODE'
	ASSUME CS:CODE,DS:DATA,SS:STACK
	
;Ѱ���������Ʒ�����������ݶε�ƫ�Ƶ�ַ����TEMPADDR
FINDITEM PROC USES CX SI DX BX
	PRINTS ITEMNAME ;��ʾ������Ʒ
	CRLF
	SCANS IN_ITEM ;������Ʒ
	CRLF
	MOV CH, 0
	MOV CL, IN_ITEM+1
	CMP CL, 0 
	JZ MENU ;����س����ز˵�
	MOV SI, OFFSET GA1
	MOV DH, 0
	SUB SI, 21
	MOV BX, 0
CMPA:
	ADD SI, 21
	INC DH;���ѭ����һ���Ƚ���һ����Ʒ
	CMP DH, N+1
	JZ FINDFAIL ;ѭ������������Ʒ�Ժ�û�ҵ������������Ϣ
CMPB:
	MOV DL, [SI+BX] ;���뵱ǰҪ�Ƚϵ��ַ�
	CMP BYTE PTR [IN_ITEM+BX+2], DL ;�Ƚ������Ƿ���ȷ
	JNZ CMPA ;����ͬ���Ƚ���һ����Ʒ
	INC BX ;�ڲ�ѭ����һ���Ƚ���һ���ַ�
	CMP BX, CX ;�Ƚ��Ƿ�ȫ������
	JNZ CMPB ;��û��ȫ���Ƚ��꣬�Ƚ���һ���ַ�
	CMP BYTE PTR [SI+BX], 0 ;�жϱȽ������һλ�Ƿ�Ϊ0
	JNZ CMPA ;������0��Ϊ�Ӵ��������Ƚ���һλ
	MOV TEMPADDR, SI
	RET
FINDITEM ENDP

;��ʾ��Ʒ��Ϣ�������,��ڲ���ΪDI�����׵�ַ
OUTNAME PROC USES BX SI DX AX
	MOV BX, 0 ;ѭ��������
	MOV SI, TEMPADDR
LOPS:
	MOV DL, [SI+BX]
	CMP DL, 0
	JZ LOPE
	MOV AH, 2H
	INT 21H
	INC BX
	JMP LOPS
LOPE:
	RET
OUTNAME ENDP

;������ת��Ϊ10����
;��ڲ���AXΪ�봫�ݵ�����
;���ڲ���Ϊ��ת������ַ�������TEMP��
TRANS10 PROC USES BX CX DX SI
	MOV BX, 10 ;����
	MOV CX, 0 ;������
	LEA SI, TEMP
	OR AX, AX ;������ת��
	JNS LOPX
	NEG AX ;����ת��Ϊ����
	MOV BYTE PTR [SI], '-' ;���븺��
	INC SI
LOPX:       
	XOR DX, DX ;����
	DIV BX
	PUSH DX
	INC CX
	OR AX, AX ;AXΪ0��ʱ������ѭ��
	JNZ LOPX
LOPY:       
	POP AX ;������ջ
	ADD AL, 30H
	MOV [SI], AL
	INC SI
	LOOP LOPY
	MOV BYTE PTR [SI], '$' ;������
	RET
TRANS10 ENDP

;10����ת2����
;��ڣ�DI��ʾ�׵�ַ,CX��ʾ����
;���ڣ�AX��Ž����DIΪ-1��ʾ����
BITRANS PROC USES EBX EAX
	MOV EAX, 0
	MOV BL, [DI]
	CMP BL, '0'
	JZ NOTR ;�������һ��Ϊ0�����������
	DEC DI
GO1:
	INC DI
	MOV BL, [DI]
GO2:
	CMP BL, '0'
	JB NOTR ;С��0�������
	CMP BL, '9'
	JA NOTR ;����0�������
	SUB BL, 30H
	MOVZX EBX,BL
	IMUL EAX, 10
	JO NOTR ;������������
	ADD EAX, EBX
	JO NOTR
	JS NOTR
	JC NOTR ;�������ɸ�������λ���������
	DEC CX
	JNZ GO1
	CMP EAX, 7FFFH ;��ת������Ƿ񳬹�16λ
	JA NOTR ;����16λ���������
RE:
	MOV TEMP_NUM, AX
	RET
NOTR:
	MOV DI, -1
	JMP RE
BITRANS ENDP


;�޸���Ϣ����ڲ���SI����ǰλ��
EDITP PROC USES SI
	CALL FINDITEM
	MOV SI, TEMPADDR
L1:
	PRINTS OUT2
	TENOUT_DIS SI+10
	PRINTS NOTE
	INEDIT_BIT SI+10, L1, L2
L2:
	PRINTS OUT7
	TENOUT SI+11
	PRINTS NOTE
	INEDIT SI+11, L2, L3
L3:
	PRINTS OUT3
	TENOUT SI+13
	PRINTS NOTE
	INEDIT SI+13, L3, L4
L4:
	PRINTS OUT4
	TENOUT SI+15
	PRINTS NOTE
	INEDIT SI+15, L4, L5
L5:
	PRINTS OUT5
	TENOUT SI+17
	PRINTS NOTE
	INEDIT SI+17, L5, L6
L6:
	RET
EDITP ENDP

START:
	MOV AX, DATA
	MOV DS, AX
	JMP INNAME

FINDFAIL: ;û�ҵ��������������Ϣ������Ѱ��
	PRINTS NOTITEM
	CRLF
	JMP FINDIT

INNAME: ;��������
	CRLF
	PRINTS PUTNAME ;��ʾ��������
	CRLF
	SCANS IN_NAME ;��������
	CRLF
	MOV CL, IN_NAME+1
	MOV CH, 0
	CMP CL, 0
	JZ MENU ;���س�ֱ�ӽ��빦���� 
	CMP CL, 1
	JZ IFEXIT
	MOV BX, 0 ;ѭ��������
	JMP COMPA

IFEXIT: ;�ж��Ƿ�����q�˳�
	LEA BP, OFFSET IN_NAME
	ADD BP, 2
	CMP DS:BYTE PTR [BP], 'q'
	JZ EXIT
	JMP COMPA

COMPA: ;�Ƚ����������Ƿ���ȷ 
	MOV DL, [BNAME+BX]
	CMP BYTE PTR [IN_NAME+BX+2], DL
	JNZ LFAIL ;����ͬ�����������ʾ��Ϣ
	INC BX
	CMP BX, CX
	JNZ COMPA
	CMP BYTE PTR [BNAME+BX], 0
	JNZ LFAIL ;�����ִ����������Ϣ
	JMP PASSWORD

LFAIL: ;��½δ�ɹ����������Ϣ
	PRINTS LOGFAIL
	CRLF
	JMP INNAME

PASSWORD: ;������������ģ��
	PRINTS PUTPASSWORD ;��ʾ��������
	CRLF
	SCANS IN_PWD ;��������
	CRLF
	MOV CL, IN_PWD+1
	MOV CH, 0 ;CX������λ��
	MOV BX, 0
	JMP COMPB

COMPB: 
	MOV DL, [BPASS+BX]
	CMP BYTE PTR [IN_PWD+BX+2], DL
	JNZ LFAIL ;����ǰλ�Ƚϲ�����������������Ϣ
	INC BX
	CMP BX, CX
	JNZ COMPB ;�����Ƚ���һλ
	CMP BYTE PTR [BPASS+BX], 0
	JNZ LFAIL ;�����Ӵ�����ʾ������Ϣ
	MOV DL, 1
	MOV AUTH, DL ;��½ͨ����AUTH��ֵΪ1
	PRINTS LOGINREMIND
	CRLF
	JMP MENU

MENU:
	CRLF
	PRINTS MENU0
	CRLF
	PRINTS MENU1
	CRLF
	CMP AUTH, 0
	JZ MENU06 ;δ��¼״ֻ̬���1��6
	PRINTS MENU2
	CRLF
	PRINTS MENU3
	CRLF
	PRINTS MENU4
	CRLF 
	PRINTS MENU5
	CRLF
MENU06:
	PRINTS MENU6
	CRLF

CHMENU:
	SCANS IN_MENU ;
	MOV CL, IN_MENU+1
	MOV CH, 0
	CMP CL, 0
	JZ MENU ;����س��ص�����3-1
	CMP CL, 1
	JZ COMPC

; �˵���ת����
COMPC:
	LEA BP,IN_MENU+2
	CMP DS:BYTE PTR [BP], '1'
	JZ FINDIT
	CMP DS:BYTE PTR [BP], '2'
	JZ EDITIT
	CMP DS:BYTE PTR [BP], '3'
	JZ CALCULATEREFER
	CMP DS:BYTE PTR [BP], '4'
	JZ RANKINGLEVEL
	CMP DS:BYTE PTR [BP], '5'
	JZ SHOWALLINFO
	CMP DS:BYTE PTR [BP], '6'
	JZ EXIT
FINDIT:
	CALL FINDITEM ;�ҵ���Ʒ��ƫ�Ƶ�ַΪSI
	PRINTS OUT1
	; MOV DI,SI
	CALL OUTNAME ;�����Ʒ���ƣ���ڲ���Ϊ�׵�ַ��SI��
	MOV SI, TEMPADDR
	CRLF
	PRINTS OUT2
	TENOUT_DIS SI+10
	CRLF
	PRINTS OUT3
	TENOUT SI+13
	CRLF
	PRINTS OUT4
	TENOUT SI+15
	CRLF
	PRINTS OUT5
	TENOUT SI+17
	CRLF
	PRINTS OUT6
	TENOUT SI+19
	CRLF
	JMP MENU

EDITIT:
	CALL EDITP
	JMP MENU

CALCULATEREFER:
	CALL CALCREFER
	JMP MENU

RANKINGLEVEL:
	CALL RANKLEVEL
	JMP MENU

SHOWALLINFO:
	CALL ALLINFO
	JMP MENU

EXIT: 
	MOV AX,4C00H  ; CS:05DFH, CS:0731H
	INT 21H

CODE ENDS
	END START
 