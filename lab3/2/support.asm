.386

PUBLIC  _EDITIT, _CALCULATEREFER, _RANKINGLEVEL

SCANS MACRO SC
	PUSH AX
	PUSH DX
	LEA DX,SC
	MOV AH,10
	INT 21H
	POP DX
	POP AX
ENDM

PRINTS MACRO PR
	PUSH AX
	PUSH DX
	LEA DX,PR
	MOV AH,9H
	INT 21H
	POP DX
	POP AX
ENDM

CRLF MACRO
	PUSH DX
	PUSH AX
	MOV DL,0AH
	MOV AH,2H
	INT 21H
	POP AX
	POP DX
ENDM

TENOUT MACRO NUM
	PUSH AX
	MOV AX, WORD PTR [NUM]
	CALL TRANS10
	PRINTS TEMP
	POP AX
ENDM

TENOUT_DIS MACRO NUM
	PUSH AX
	MOVZX AX, BYTE PTR [NUM]
	CALL TRANS10
	PRINTS TEMP
	POP AX
ENDM

INEDIT MACRO NUM, C1, C2
	SCANS IN_EDIT
	CRLF
	LEA DI, IN_EDIT+2
	MOVZX CX, IN_EDIT+1
	CMP CX, 0
	JZ C2
	CALL BITRANS
	CMP DI, -1
	JZ C1 
	MOV AX, TEMP_NUM
	MOV WORD PTR [NUM],AX
ENDM

INEDIT_BIT MACRO NUM, C1, C2
	SCANS IN_EDIT
	CRLF
	LEA DI, IN_EDIT+2
	MOVZX CX, IN_EDIT+1
	CMP CX, 0
	JZ C2
	CALL BITRANS
	CMP DI, -1
	JZ C1 
	MOV AX, TEMP_NUM
	MOV [NUM], AL
ENDM

_STACK SEGMENT USE16 STACK
	DB 500 DUP(0)
_STACK ENDS

_DATA SEGMENT USE16 WORD PUBLIC 'DATA'
	N EQU 8
	IN_ITEM   DB 12
        		DB ?
      		DB 12 DUP(0)

	IN_EDIT DB 10
	              DB ?
	              DB 10 DUP(0)

	TEMP DB 10 DUP(0)

	OUT1 DB 'ITEM NAME: $'
	OUT2 DB 'DISCOUNT: $'
	OUT3 DB 'SAILING PRICE: $'
	OUT4 DB 'TOTAL STOCK NUMBERS: $'
	OUT5 DB 'SOLD OUT NUMBERS: $'
	OUT6 DB 'RECOMENDATION LEVEL: $'
	OUT7 DB 'INPUT PRICE: $'

	PUTNAME DB 'PLEASE INPUT THE NAME(INPUT ENTER TO LOOKUP, INPUT Q TO QUIT)$'
	NOTITEM DB 'DO NOT FIND THE ITEM$'
	ITEMNAME DB 'PLEASE INPUT THE ITEM NAME(INPUT ENTER TO INPUT NAME)$'

	NOTE DB '->$'
	TEMPADDR DW ?
	TEMP_NUM DW ?

	; 当实际售价为0时输出
    	BUF1 DB 'FOR FREE', 0AH, 0DH, '$'
    	M EQU 8
    	BUF2 DB 'NO ENOUGH COMMODITY', 0AH, 0DH, '$'
    	TEMPNUM DW ?
    	FLAG DB 0
	 _RANKING DW M DUP(0)
	 _RANKNUM DW M DUP(0)
_DATA ENDS

_TEXT SEGMENT USE16 BYTE PUBLIC 'CODE'
	ASSUME CS:_TEXT,DS:_DATA,SS:_STACK
	
FINDITEM PROC
	PUSH CX
	PUSH SI
	PUSH DX
	PUSH BX
	PRINTS ITEMNAME
	CRLF
	SCANS IN_ITEM
	CRLF
	MOV CH, 0
	MOV CL, IN_ITEM+1
	CMP CL, 0 
	JZ ENDNOINPUT
	MOV SI, OFFSET IN_ITEM
	MOV DH, 0
	SUB SI, 21
	MOV BX, 0
CMPA:
	ADD SI, 21
	INC DH
	CMP DH, N+1
	JZ ENDNOTFIND
CMPB:
	MOV DL, [SI+BX]
	CMP BYTE PTR [IN_ITEM+BX+2], DL
	JNZ CMPA
	INC BX
	CMP BX, CX
	JNZ CMPB
	CMP BYTE PTR [SI+BX], 0
	JNZ CMPA
	MOV TEMPADDR, SI
	JMP ENDFIND
ENDNOTFIND:
	PRINTS NOTITEM
	CRLF
ENDNOINPUT:
	MOV BYTE PTR FLAG, 1
ENDFIND:
	POP BX
	POP DX
	POP SI
	POP CX
	RET
FINDITEM ENDP

OUTNAME PROC
	PUSH BX
	PUSH SI
	PUSH DX
	PUSH AX
	MOV BX, 0
	MOV SI, TEMPADDR
LOPS:
	MOV DL, [SI+BX]
	CMP DL, 0
	JZ LOPE
	MOV AH, 2H
	INT 21H
	INC BX
	JMP LOPS
LOPE:
	POP AX
	POP DX
	POP SI
	POP BX
	RET
OUTNAME ENDP

TRANS10 PROC
	PUSH BX
	PUSH CX
	PUSH DX
	PUSH SI
	MOV BX, 10
	MOV CX, 0
	LEA SI, TEMP
	OR AX, AX
	JNS LOPX
	NEG AX
	MOV BYTE PTR [SI], '-'
	INC SI
LOPX:
	XOR DX, DX
	DIV BX
	PUSH DX
	INC CX
	OR AX, AX
	JNZ LOPX
LOPY:       
	POP AX
	ADD AL, 30H
	MOV [SI], AL
	INC SI
	LOOP LOPY
	MOV BYTE PTR [SI], '$'
	POP SI
	POP DX
	POP CX
	POP BX
	RET
TRANS10 ENDP

BITRANS PROC
	PUSH EAX
	PUSH EBX
	MOV EAX, 0
	MOV BL, [DI]
	CMP BL, '0'
	JZ NOTR
	DEC DI
GO1:
	INC DI
	MOV BL, [DI]
GO2:
	CMP BL, '0'
	JB NOTR
	CMP BL, '9'
	JA NOTR
	SUB BL, 30H
	MOVZX EBX,BL
	IMUL EAX, 10
	JO NOTR
	ADD EAX, EBX
	JO NOTR
	JS NOTR
	JC NOTR
	DEC CX
	JNZ GO1
	CMP EAX, 7FFFH
	JA NOTR
NOTR:
	MOV DI, -1
	JMP RE
RE:
	MOV TEMP_NUM, AX
	POP EBX
	POP EAX
	RET
BITRANS ENDP

EDITP PROC
	PUSH SI
	CALL FINDITEM
	MOV SI, TEMPADDR
L1:
	PRINTS OUT2
	TENOUT_DIS SI+10
	PRINTS NOTE
	INEDIT_BIT SI+10, L1, L2
L2:
	PRINTS OUT7
	TENOUT SI+11
	PRINTS NOTE
	INEDIT SI+11, L2, L3
L3:
	PRINTS OUT3
	TENOUT SI+13
	PRINTS NOTE
	INEDIT SI+13, L3, L4
L4:
	PRINTS OUT4
	TENOUT SI+15
	PRINTS NOTE
	INEDIT SI+15, L4, L5
L5:
	PRINTS OUT5
	TENOUT SI+17
	PRINTS NOTE
	INEDIT SI+17, L5, L6
L6:
	POP SI
	RET
EDITP ENDP

; 计算推荐度
CALCREFER PROC
	PUSHAD
    MOV SI, M
    MOV BP, OFFSET IN_ITEM
ONECALC:
    MOV AX, DS:WORD PTR [BP+17]
    CMP AX, DS:WORD PTR [BP+15]
    JNL NEC
    ; 推荐度 = (进货价*(2*进货数量)+已售数量*实际销售价格)*128/实际销售价格*2*进货数量
    ; 计算进货数量*2
    MOVZX EAX, DS:WORD PTR [BP+15]
    CMP EAX, 0
    JZ NEC
    SHL EAX, 1
    MOV ECX, EAX
    ; 计算实际销售价格
    MOVZX EAX, DS:BYTE PTR [BP+10]
    MUL DS:WORD PTR [BP+13]
    MOV EBX, 10
    XOR EDX, EDX
    DIV EBX
    CMP EAX, 0	
    JZ NRP
    MOV EDI, EAX
    ; 计算分母,实际销售价格*2*进货数量
    MUL ECX
    MOV EBX, EAX
    ; 进货价*(2*进货数量)
    MOVZX EAX, DS:WORD PTR [BP+11]
    MUL ECX
    MOV ECX, EAX
    ; 已售数量*实际销售价格
    MOVZX EAX, DS:WORD PTR [BP+17]
    MUL EDI
    ADD EAX, ECX
    ; *128
    SHL EAX, 7
    XOR EDX, EDX
    ; 除以分母，计算出结果
    DIV EBX
    ; 存放到推荐度处
    MOV DS:[BP+19], AX
LOPCALC:
    DEC SI    
    JZ ENDCALC
    ADD BP, 21
    JMP ONECALC
NRP: ; 实际售价为0时输出
    PRINTS BUF1
    JMP LOPCALC
NEC: ; NOT ENOUGH COMMODITIES
    PRINTS BUF2
    JMP LOPCALC
ENDCALC:
	POPAD
    RET
CALCREFER ENDP

; 按推荐度排名
RANKLEVEL PROC
	PUSHA
    CALL CALCREFER
    MOV CX, M
    MOV BX, OFFSET IN_ITEM
    MOV DI, 0
LOPCOL:
    MOV _RANKING[DI], BX
    ADD DI, 2
    ADD BX, 21
    DEC CX
    JNZ LOPCOL
    MOV DI, 0
LOPR: ; 使用选择排序对其进行排序
    MOV BX, DI
    ADD BX, 2
LOPCMP:
    MOV SI, _RANKING[DI]
    MOV CX, [SI+19]
    MOV SI, _RANKING[BX]
    MOV DX, [SI+19]
    CMP DX, CX
    JB NEXTLOPR
CHANGER:
    MOV TEMPNUM, SI
    MOV SI, _RANKING[DI]
    MOV _RANKING[BX], SI
    MOV SI, TEMPNUM
    MOV _RANKING[DI], SI
NEXTLOPR:
    ADD BX, 2
    CMP BX, 2*M
    JB LOPCMP
    ADD DI, 2
    CMP DI, 2*(M-1)
    JB LOPR
    MOV AX, 1
    MOV DI, 0
    MOV _RANKNUM[DI], AX
LOPRANK:
    MOV SI, _RANKING[DI]
    MOV CX, [SI+19]
    MOV SI, _RANKING+2[DI]
    MOV DX, [SI+19]
    CMP DX, CX
    JZ GETRANK
    INC AX
GETRANK:
    MOV _RANKNUM+2[DI], AX
    ADD DI, 2
    CMP DI, 2*(M-1)
    JB LOPRANK
	POPA
    RET
RANKLEVEL ENDP

FINDIT PROC
	CALL FINDITEM
	CMP BYTE PTR FLAG, 1
	JZ ENDFINDIT
	PRINTS OUT1
	; MOV DI,SI
	CALL OUTNAME
	MOV SI, TEMPADDR
	CRLF
	PRINTS OUT2
	TENOUT_DIS SI+10
	CRLF
	PRINTS OUT3
	TENOUT SI+13
	CRLF
	PRINTS OUT4
	TENOUT SI+15
	CRLF
	PRINTS OUT5
	TENOUT SI+17
	CRLF
	PRINTS OUT6
	TENOUT SI+19
	CRLF
ENDFINDIT:
	RET
FINDIT ENDP

_EDITIT:
	CALL EDITP
	RET

_CALCULATEREFER:
	CALL CALCREFER
	RET

_RANKINGLEVEL:
	CALL RANKLEVEL
	RET

_TEXT ENDS
	END
 